// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TestServerClient is the client API for TestServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestServerClient interface {
	GetSomeData(ctx context.Context, in *GetSomeDataIn, opts ...grpc.CallOption) (*GetSomeDataOut, error)
}

type testServerClient struct {
	cc grpc.ClientConnInterface
}

func NewTestServerClient(cc grpc.ClientConnInterface) TestServerClient {
	return &testServerClient{cc}
}

func (c *testServerClient) GetSomeData(ctx context.Context, in *GetSomeDataIn, opts ...grpc.CallOption) (*GetSomeDataOut, error) {
	out := new(GetSomeDataOut)
	err := c.cc.Invoke(ctx, "/server.TestServer/GetSomeData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestServerServer is the server API for TestServer service.
// All implementations must embed UnimplementedTestServerServer
// for forward compatibility
type TestServerServer interface {
	GetSomeData(context.Context, *GetSomeDataIn) (*GetSomeDataOut, error)
	mustEmbedUnimplementedTestServerServer()
}

// UnimplementedTestServerServer must be embedded to have forward compatible implementations.
type UnimplementedTestServerServer struct {
}

func (UnimplementedTestServerServer) GetSomeData(context.Context, *GetSomeDataIn) (*GetSomeDataOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSomeData not implemented")
}
func (UnimplementedTestServerServer) mustEmbedUnimplementedTestServerServer() {}

// UnsafeTestServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestServerServer will
// result in compilation errors.
type UnsafeTestServerServer interface {
	mustEmbedUnimplementedTestServerServer()
}

func RegisterTestServerServer(s grpc.ServiceRegistrar, srv TestServerServer) {
	s.RegisterService(&TestServer_ServiceDesc, srv)
}

func _TestServer_GetSomeData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSomeDataIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServerServer).GetSomeData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.TestServer/GetSomeData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServerServer).GetSomeData(ctx, req.(*GetSomeDataIn))
	}
	return interceptor(ctx, in, info, handler)
}

// TestServer_ServiceDesc is the grpc.ServiceDesc for TestServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "server.TestServer",
	HandlerType: (*TestServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSomeData",
			Handler:    _TestServer_GetSomeData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/server.proto",
}
